#!/usr/bin/env node

import dotenv from 'dotenv';
dotenv.config();
// // testing db connection
// console.log("MongoDB URI:", process.env.MONGODB_URI);
//
// if (!process.env.MONGODB_URI) {
//   console.error("MONGODB_URI is not defined in the environment.");
//   process.exit(1);
// }

/**
 * Module dependencies.
 */
import app from '../app.js';
import createDebug from 'debug';
import {connectToDatabase} from "../config/database.js";

import http from 'http';

const server = http.createServer(app);

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const debug = createDebug('user-service:server');
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.log(`Server is running on ${bind}`);
}

/**
 * Connect to the database and then start the server.
 */
connectToDatabase()
    .then(() => {
      /**
       * Listen on provided port, on all network interfaces.
       */

      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    })
    .catch((err) => {
      console.error("Could not connect to the database:", err);
      process.exit(1); // Exit if the database connection fails
    });


